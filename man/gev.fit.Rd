% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/opti.R
\name{gev.fit}
\alias{gev.fit}
\title{Performing a fit to the GEV function.}
\usage{
gev.fit(x, initial = NULL, rerun = TRUE, optim.function = likelihood,
  gradient.function = likelihood.gradient, error.estimation = c("MLE", "MC",
  "none"), method = c("Nelder-Mead", "BFGS", "CG", "SANN"),
  monte.carlo.sample.size = 1000, return.period = 100, ...)
}
\arguments{
\item{x}{Blocked time series to which the GEV distribution should be fitted.}

\item{initial}{Initial values for the GEV parameters. Has to be provided as 3x1 vector. If NULL the parameters are estimated with the function \code{\link{likelihood.initials}}. Default = NULL}

\item{rerun}{The optimization will be started again using the results of the first optimization run. If the "Nelder-Mead" algorithm is used for optimization (as it is here) this can be useful to escape local minima. When choosing simulated annealing as method the rerun will be skipped. Provide a different number of runs directly to the GenSA function via ... instead. Default = TRUE}

\item{optim.function}{Function which is going to be optimized. Default: \code{\link{likelihood}}}

\item{gradient.function}{If NULL a finite difference method is invoked. Default: \code{\link{likelihood.gradient}}}

\item{error.estimation}{Method for calculating the standard errors of the fitted results. Using the option "MLE" the errors of the GEV parameters will be calculated as the square roots of the diagonal elements of the inverse of the hessian matrix calculated with the MLE of the GEV parameters. The standard error of the return level is calculated using the Delta method and the MLE of the GEV parameters. Alternative one can use Monte Carlo simulations with "MC" for which 1000 samples of the same size as x will be drawn from a GEV distribution constituted by the obtained MLE of the GEV parameters of x. The standard error is then calculated via the square of the variance of all fitted GEV parameters and calculated return levels. Sometimes the inversion of the hessian fails (since the are some NaN in the hessian) (which is also the reason why the ismev package occasionally does not work). In such cases the Monte Carlo method is used. Option "none" just skips the calculation of the error. Default = "MLE".}

\item{method}{Through the argument 'method' (which is passed to the optim function) the optimization algorithm is chosen. The default one is the "Nelder-Mead".}

\item{monte.carlo.sample.size}{Number of samples used to obtain the Monte Carlo estimate of the standard error of the fitting. Default = 1000}

\item{return.period}{Quantiles at which the return level is going to be evaluated. Class "numeric". Default = 100.}

\item{...}{Additional arguments for the optim() or GenSA::GenSA() function. Depending on the chosen method.}
}
\value{
Output of the optim function with class == c( "list", "climex.gev.fit" )
\itemize{
 \item{ par = MLE of the GEV parameters }
 \item{ value = Value of the negative log-likelihood evaluated at the MLE }
 \item{ counts = Number of function evaluations during the optimization }
 \item{ convergence = Specifies the state of the convergence (see \code{\link{optim}})) }
 \item{ message = see \code{\link{optim}} }
 \item{ hessian = Hessian or the observed information matrix evaluated at the MLE }
 \item{ return.level = Estimate of the return levels at the provided return periods }
 \item{ se = Standard error of the GEV parameters and the return levels }
 \item{ x = Original time series }
}
}
\details{
Custom fitting of the GEV function including the estimation of the initial conditions. Per default the optimization is run twice to prevent getting trapped in local minima of the negative log-likelihood function. The output is of optim style. But the errors of the fitting are also provided as well as the estimates and the errors of some specified return levels. I had some problems with the optim implementation of the simulated annealing implementation. The optimization just kept its value and nothing happened. That's why I switched to the \code{\link{GenSA}} package.
}
\examples{
potsdam.anomalies <- anomalies( temp.potsdam )
potsdam.blocked <- block( potsdam.anomalies )
gev.fit( potsdam.blocked )
}
\author{
Philipp Mueller
}
\seealso{
Other optimization: \code{\link{likelihood.gradient}},
  \code{\link{likelihood.initials}},
  \code{\link{likelihood}}
}

